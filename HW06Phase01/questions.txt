1. The number of nodes that my TSP implementation can handle in under 60 seconds is 1736 nodes. Increasing the speed of the computer shouldn't have an effect on the run time of the algorithm, because a faster computer will be assumed to be able to solve a bigger problem, but will have the same speedup issues. The better solution is to create a faster algorithm. 

2. Using a brute force algorthm to solve the problem, which means finding all possible paths through a graph and then finding the cheapest route, will have a runtime of O(n!). To find the number of combinations of nodes all you have to do is multiply the amount of nodes by one less each time, accounting for the fact that there is one less node to use each time. A representation of this in math is n!. The 'n!' stands for 'n' factorial and it means to take the number n and multiply it by (n-1) until n reaches one. Here's an example: 2! = 2 x 1 = 2, and 3! = 3 x 2 x 1 = 6. A graph with only 8 nodes will have 40,320 combinations! It's easy to see that using brute force is not the way to go. 