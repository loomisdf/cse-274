1. In both of the cases described, one where the string has been seen before and the other where it has not, the run time will be similar. It's not be possible to know if the data has already been seen when using a linked list, unless the information is kept elsewhere. Therefore, each time increaseCount is called, an iteration through the list must be done to see if the data is already there. If the item is already in the list then it will stop the iteration and increment the amount of that string. Because the sorting is done by the string value, the search can end prematurely and has a run time of O(n). Performing increaseCount on an item not in the list will perform the same, but after the loop has ended a new loop will start, and place the string in the proper position. This will also have a run time of O(n), because the loop can end prematurely.
	
The getNthPopular method will have a Theta(n^2) runtime because it requires nested loops. The outer loop will go from 0 to n, where 0 is most popular, 1 is second, and so on. The outer loop will also set the number to ignore. The numToIgnore will be the last most popular item searched for. The second loop will look for the highest number that isn't numToIgnore. This nested loop structure is why the runtime is Theta(n^2).  

2. I don't think sorting by count will change any of the runtimes. increaseCount will still have a runtime of O(n) on a string that has been seen, and not seen. The getNthPopular method will also require the nested loops with a runtime of O(n^2).

3. Using a HashTable is much different from the linked list. There is no need to sort the list, and in fact sorting is impossible with a hash table. adding an item to the table with increaseCount will have a constant runtime.  There would have to be a check performed to make sure the value is not already in the hash table, but this will not have an impact on the performance. Calling getNthPopular however, will require a runtime similar to that when using linked lists, which means nested loops and a runtime of O(n^2). This is because looking a up specific entry is really quick, but getting information on all of the entries is not made any faster. 
